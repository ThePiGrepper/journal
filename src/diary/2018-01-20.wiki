




TODO:
- nodemcu + pn532 NFC module
- securebox: fix gps coordinate parsing bug
- securebox: add gprs 'smart' message parsing
- securebox: add new scheduler features
- rosetta_stm: write & send quote
- rosetta_stm: port sensus komm protocol to stm.
  - rosetta_stm: write a simple I2C 'back and forth' example between Rpi and STM32. [NEW]
  - rosetta_stm: understand I2C slave example.
  - rosetta_stm: write/modify quick I2C slave.
  - rosetta_stm: test I2C slave example with nodeMCU as I2C master.
- rosetta_stm: test with rosetta-rpi build.
- pressure_mon: build prototype
- pressure_mon: sensor eagle part inverted. fixup needed. also join split pads.
- pressure_mon: adapt eagle part to second model.
- pressure_mon: design and build amplification stage board.
- pressure_mon: test regular ADC for both inputs and compare to differential.
- pressure_mon: test Virtual_COM_Port_Loopback example on NucleoF3.
- pressure_mon: create System clock setup monitor test. expands [[2017-12-17#2|here]]
- pressure_mon: find/write and test python/c# app to receive serial data and plot it realtime.
- pressure_mon: design and build breakout board for opamp filter/amplifier.

- install Kodi on PC stick(MeegoPad)
- install/test github alternatives on server.
- compile/install kernel on XPS13. test dkms for virtualbox.
- test power comsumption of ESP8266.
- check frequency and backup power issue on rtc custom module.
- test both led panels with nodeMCU.
- test power comsumption of led panels.

Previous in Thread: [[2017-12-31]]

== rosetta_stm: write a simple I2C 'back and forth' example between Rpi and STM32 ==
- testing rpi I2C functionality with ds1307 [[2018-01-20#RTC|RTC]]. it worked just fine.

== Setup ds1307 *RTC* on rasperry Pi ==
* tested with Raspbian.
  == Install I2C support on Rpi ==
  - install i2c tools:
    # apt install python-smbus i2c-tools
  - install kernel support:
    - Using raspi-config:
      # raspi-config
      - Go to Interfacing Options->I2C: Enable.
    - Or edit Manually:
      - edit /etc/modules, add:
        i2c-bcm2708 //(or correct cpu, depending rpi version)
        i2c-dev
        i2c-bcm2835
      - edit /etc/modprobe.d/raspi-blacklist.conf, if it exists:
        - if the above modules are blacklisted as seen below, comment(#) or delete it:
          blacklist i2c-bcm2708 //or similar
      - edit /boot/config.txt (only for kernel > 3.18):
        dtaparam=i2c1=on
        dtaparam=i2c_arm=on
    - reboot and test connected i2c devices with:
      # i2cdetect -y 1
    * for the raspberry Pi B(256MB) only:
      # i2cdetect -y 0
  == Enable RTC driver support ==
    - enable i2c-rtc and ds1307 devicetree overlay:
      - edit /boot/config.txt:
        dtoverlay=i2c-rtc,ds1307 //this means, run dtoverlay i2c-rtc with device ds1307(parameter).
    - To confirm that it works, reboot and test with i2cdetect again.
    - Instead of the I2C address(0x68 for ds1307), it will show 'UU'.
  == Replace software/network RTC source with Real/HW RTC source ==
    - To use the newly added HW RTC, remove 'false RTC' package.(only for raspbian)
      > # apt remove fake-hwclock
      > # update-rc.d -f fake-hwclock remove //remove link to /etc/init.d/<script> at /etc/rc0.d.
    - edit /lib/udev/hwclock-set and comment out the following:
      #if [ -e /run/systemd/system ] ;then
      #exit 0
      #fi
    - read the rtc clock (it hasn't been sync yet):
      # hwclock -D -r //-r:read, -D:debug mode
    - check that current date/time is correct by using: $ date, fix it otherwise.
    - write system time to RTC:
      # hwclock -w
    - confirm by reading it again:
      # hwclock -r
    * To re-enable it, do:
      - edit /lib/udev/hwclock-set and comment back in the commented section.
      # apt install fake-hwclock
      # update-rc.d fake-hwclock defaults

== debian tips to search for files in packages ==
- to see all files from .deb package:
  $ dpkg -L
- to show which package contains a file: apt-file //first, install apt-file
  # apt-file update //to refresh the package database
  $ apt-file search <pattern> //search package which contains <pattern>

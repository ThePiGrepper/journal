




TODO:
- nodemcu + pn532 NFC module
- securebox: fix gps coordinate parsing bug
- securebox: add gprs 'smart' message parsing
- securebox: add new scheduler features
- wsensor: add rtc support
- write quote for embedded project development on rpi
- rpi: test usb-otg serial & ether modes

== nodemcu + pn532 NFC module ==
- test pn532(w/i2c) successfully on __ANY__ platform:
  - try Rpi, STM32,arduino(let's hope it does NOT come to this).
- If success == true, use logic analizer to inspect the i2c frame.
- If needed, try to reimplement i2c module on nodemcu.

== relay board ==
- ask for help on choosing zener diode.

== securebox: fix gps coordinate parsing bug ==
- create standalone test. maybe get a real gps log(already got one).

== securebox: add gprs 'smart' message parsing ==
- let's think about this. some 'nice to have's:
  - Improve gprs on-time.

== securebox: add new scheduler features ==
- Change 'ghost' extra buffer space: currently is 'BUFIN_SZ',
  recommended: 'MAX_SIZE', driver-dependent.
- dynamic throughput: when input buffer is over X% full, change
  output granularity(1/1 to 1/2, for example), this means
  basically, __downsampling__ the output. This, until buffer
  'fullness' is down again below threshold.
- Change position to integer interpretation.(what's this??)

== write quote for embedded project development on rpi ==
- create a 'semi-generic' quote for hardware development on such a board.
- create one for memory requirement of 256M and 512M, respectively.

== rpi: test usb-otg serial & ether modes ==
- this modes are useful to access the rpi without 'real' serial nor a wifi network.
- apparently all otg modes are enabled using the same main kernel module: dwc2
- dwc2 module is the linux driver for the 'DesignWare HS OTG Controller'.
- Let's start:
  - The following method was tested on a rpi0 and rpi0w.
  - There're several modes, the 2 tested succesfully here are: g_serial and g_ether:
    - g_serial: virtual serial port.
    - g_ether: network interface.
  - g_serial:
    - add an device tree overlay to the config file at /boot/config.txt:
      dtoverlay=dwc2
    - add to /boot/cmdline.txt the following line, adding kernel modules:
      - (after rootwait) modules-load=dwc2,g_serial
      - to connect the console to this, enable getty service for the new node:
        > sudo systemctl enable getty@ttyGS0.service
        * if not, you can use this serial port for any other purpose.
    * Just to clarify, the functionality of this module DOES NOT have anything to do
      with uart module. So the uart driver can be disabled and this would work just fine.
  - g_ether:
    - add an device tree overlay to the config file at /boot/config.txt:
      dtoverlay=dwc2
    - add to /boot/cmdline.txt the following line, adding kernel modules:
      - (after rootwait) modules-load=dwc2,g_ether
      - by default, this will create the device 'usb0'.
    - Configure the network for the new device, add static addr for <device>. [[2017-09-22|link]]
    - when connecting to the raspberry through ssh, first identify the interface name.
    - then, you should set temporarily your ip on that interface:
      > sudo ip addr add 192.168.7.10/24 broadcast 192.168.7.1 dev <device>
    - and access it through ssh normally:
      > ssh <user>@<raspberrypi_ip>
  - Other modules to be tested(let's hope):
    - g_mass_storage
  
  - Some additional points:
    - Another way to add modules besides /boot/cmdline.txt, is on /etc/modules.

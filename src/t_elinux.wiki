== Embedded Linux notes ==
- sabotage: linux distro w/busybox - https://github.com/sabotage-linux
- kdump, utility to capture kernel crashes.
- VFS(Virtual File System) abstraction. Part of the kernel which interacts with the different
  File Systems using a common API.
- journaled flash FSs. ie: JFFS2, YAFFS2, LogFS.
- applications use libraries to interact with the kernel: ie: GNU C Library, glibc,musl.
- daemons,system processes, offer services to applications. ie: udev,device filesystem manager.
- applications usually are linked dynamically to libraries.
  == System Startup ==
  - bootloader, kernel and init process:
    - bootloader: highly dependent on hardware. initializes hardware, then jumps to kernel
      startup code.
      - early startup code is architecture-dependent. once done, start_kernel() is called.
      - start_kernel() does the following:
        - initializes high-level functionality.
        - mounts the root FS.
        - start the init process.
      - Setups used to bootstrap system:
        - solid-state storage setup.(all in flash)
        - disk setup.
        - network setup.(kernel(TFTP), rootFS(NFS), or kernel(disk/flash),rootFS(NFS))
          - using BOOTP/DHCP would help automating the server location.
      - for production, solid-state or disk are good, for development network is optimal.
        Criteria:
          - flash memory use
          - RAM use
          - ease of upgrading
          - bootup time
      - boot storage(flash,disk,etc) is initially programmed using a device programmer.
      - ie: jtag,BDM.
      - after being programmed, it can be reprogrammed by the bootloader(if it has such feature).
      - or by Linux MTD(memory technology device) subsystem.(ie:ROM,NOR/NAND flash)(more at Ch.7)
  - System Memory layout:
    - It's important to understand the physical memory layout before starting with development.
Chapter 4(Yaghmour) - Development Tools
  - http://denx.de/wiki/DULG/ELDK - demx software engineering Embedded Linux Development Kit.
  - debuggers,profilers,bound checkers - chapter 11(Debugging Tools)
  - to cross-compile the kernel: make ARCH=arm CROSS_COMPILE=arm-none-linux-gnueabi- menuconfig
    * all usual steps have to contain 'ARCH=arm CROSS_COMPILE=<toolchain-prefix>".

- find buildroot
- find  http://leaf.sourceforge.net
- gdb,dmalloc,valgrind,syslog trace.
- board bring-up, kernel development or application development specialists
== final project ==
- interesting files:
  - arch/arm/boot/dts/vf610m4-cosmic.dts
  - arch/arm/boot/dts/vf610-cosmic.dts
  - Documentation/devicetree/bindings/arm/fsl.txt

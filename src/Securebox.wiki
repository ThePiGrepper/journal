== SecureBox project ==

* [X] select hardware:
  * [X] cpu: stm32f4
  * [X] gprs sim900
  * [X] gps: ublox v6m
  * [X] wifi: ESP8266
* [ ] write down planning and milestones.
* [X] buy needed hardware:
  * [X] CPU
  * [X] GPRS
  * [X] GPS
  * [X] Wifi
  * [X] Smartcard reader

* [X] read about smardcard linux tools(opensc,pcsc-tools,libccid):
  * [X] check if tools are available for rpi. *they are.
  * [X] this tools are for any card reader?:
    -libccid is a generic usb-ccid protocol driver. so it should work with all readers.
    -opensc apparently works with several boards.
* [X] get compatible smartcard reader.
* [O] main program:
  * [X] study system requirements.
  * [X] design a system infrastructure.
  * [X] implement proof of concept.
  * [X] implement user level FSM.
  * [X] implement drivers.
    * [X] implement wifi driver.
    * [X] implement GPS driver.
    * [X] implement GPRS driver.
    * [X] implement other minor drivers.
  * [X] Setup configuration server on ESP8266.
  * [ ] Implement SmartCard reader driver:
    * [ ] study CCID USB protocol.
    * [ ] look for available implementations.
    * [ ] implement driver.

* [ ] Fix current issue:
  * [ ] fix gps coordinate parsing bug:
    * [ ] create standalone test. maybe get a real gps log(already got one).
  * [ ] add gprs 'smart' message parsing:
    * [ ] let's think about this. some 'nice to have's:
      * [ ] Improve gprs on-time.

* [ ] Add new features:
  * [ ] add new scheduler features.
    * [ ] Change 'ghost' extra buffer space: currently is 'BUFIN_SZ',
      recommended: 'MAX_SIZE', driver* [ ]dependent.
    * [ ] dynamic throughput: when input buffer is over X% full, change
      output granularity(1/1 to 1/2, for example), this means
      basically, __downsampling__ the output. This, until buffer
      'fullness' is down again below threshold.
    * [ ] Change position to integer interpretation.(what's this??)
